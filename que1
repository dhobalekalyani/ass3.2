import pandas as pd

# Load the dataset
data = pd.read_csv('house_rental_data.csv')
# Summary statistics
print(data.describe())

# Check for missing values
print(data.isnull().sum())

# Correlation matrix
correlation_matrix = data.corr()
from sklearn.preprocessing import StandardScaler, LabelEncoder

# Handle missing values (if any)
data.fillna(0, inplace=True)

# Encode categorical variables (if any)
label_encoder = LabelEncoder()
data['location_encoded'] = label_encoder.fit_transform(data['location'])

# Scale numerical features
scaler = StandardScaler()
data[['area_sqft', 'bedrooms', 'bathrooms']] = scaler.fit_transform(data[['area_sqft', 'bedrooms', 'bathrooms']])
# Feature selection (if needed)
selected_features = ['area_sqft', 'bedrooms', 'bathrooms', 'location_encoded']
X = data[selected_features]
y = data['rent_amount']

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.linear_model import LinearRegression

# Create and train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

